A - 绝对值排序
改进一下普通的冒泡排序即可, 把判断a[i] < a[i + 1],改成 abs(a[i]) < abs(a[i + 1])

B - 超级楼梯
简单的递推问题，考虑可以从第i - 1和第i - 2级到第i级，那么到第i级的方案数f(i) = f(i - 1) + f(i - 2)，初始化f(0) = 1, f(1) = 1
就变成了一个求菲波那切数列的问题了。

C - 骨牌铺方格
也是简单的递推问题， 按列考虑，第i列可以从第i - 1列放一个竖的骨牌和从第i - 2列放一个横着的骨牌过来，那么这题其实也是一个求斐波纳契数列的问题

D - 单词数
这个如果直接搞的话，就是一个简单的模拟问题，首先读入所有的单词，然后进行排序，之后统计里面有多少个不相同的单词就好了。
要注意行首有空格的情况，单词之间有多个空格的情况，和单词数量为0的情况
代码：
const int maxn = 1000;
char dict[maxn][100], *pdict[maxn];
char buf[10240];
int cnt;

int main() {
	while(gets(buf) != NULL) {
		int len = strlen(buf);
		if(len == 1 && buf[0] == '#') break;
		char *pos = buf;
		cnt = 0;
		while(*pos == ' ') pos++;
		//将单词取出放到数组里
		while(sscanf(pos, "%s", dict[cnt]) == 1) {
			int nowlen = strlen(dict[cnt]);
			pdict[cnt] = dict[cnt];
			pos += nowlen; cnt++;
			while((*pos < 'a' || *pos > 'z') && *pos != 0) pos++;
			if(*pos == 0) break;
		}
		//排序
		int i;
		for(i = 0; i < cnt; i++) {
			for(int j = 0; j < cnt - 1; j++) {
				if(strcmp(pdict[j], pdict[j + 1]) < 0) {
					char *tmp = pdict[j];
					pdict[j] = pdict[j + 1];
					pdict[j + 1] = tmp;
				}
			}
		}
		//统计
		int ans = 0;
		for(i = 1; i < cnt; i++) {
			if(strcmp(pdict[i], pdict[i - 1]) != 0) ans++;
		}
		if(cnt == 0) puts("0");
		else printf("%d\n", ans + 1);
	}
	return 0;
}

如果熟悉C++和STL的话， 可以利用set 和 stringstream写的简洁明了
#include <iostream>
#include <string>
#include <set>
#include <sstream>

using namespace std;

set<string> st;

int main() {
	string buf, str;
	while(getline(cin, buf)) {
		if(buf.size() == 1 && buf[0] == '#') break;
		stringstream sin(buf);
		st.clear();
		while(sin >> str) st.insert(str);
		cout << st.size() << endl;
	}
    return 0;
}

E - 母牛的故事
考虑到小牛从第四年才开始生牛，所以第i年的牛数量其实相当于第i - 1年牛的数量加上第i - 3年牛的数量，因为第i年相对于i - 3年出生的小牛来说是第四年。
所以有递推式f(i) = f(i - 1) + f(i - 3),注意初始化f(0) = 0 f(1) = 1, f(2) = 2, f(3) = 3

F - 第几天
这就是一个简单的模拟。。。
代码：
int mlim[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
int y, m, d;

int main() {
	while(scanf("%d/%d/%d", &y, &m, &d) != EOF) {
		if((y % 4 == 0 && y % 100 != 0) || y % 400 == 0) mlim[2] = 29;
		int ans = 0;
		for(int i = 1; i < m; i++) 
			for(int j = 1; j <= mlim[i]; j++) ans++;
		ans += d;
		printf("%d\n", ans);
		mlim[2] = 28;
	}
    return 0;
}

G - 求奇数的乘积
每输入一个数字，判断它是否为奇数，如果是，将其乘到ans里面。。。
因为是乘法，担心爆int所以使用了long long

代码：
int main()
{
	int n;
	while(~scanf("%d", &n)) {
		long long x, ans = 1;
		for(int i = 0; i < n; i++) {
			scanf("%I64d", &x);
			if(x&1) ans *= x;
		}
		printf("%I64d\n", ans);
	}
	return 0;
}


H - 数塔
经典的数字三角形问题，动态规划。。。
我们可以从下往上走，每向上走一行，当前数字一定是从它下方或者右下方走过来的！那么我们选择更大的那个，加到dp数组里来。。。
最后到了顶端，一定就是所能得到的最大和了。。。

代码：
const int N = 105;
int a[N][N], d[N][N];
int main() {
    int n, cas;
    scanf("%d", &cas);
    while(cas--) {
        scanf("%d", &n);
        memset(d, 0, sizeof(d));
        for(int i = 1; i <= n; i++)
            for(int j = 1; j <= i; j++)
                scanf("%d", &a[i][j]);
        for(int j = 1; j <= n; j++)
            d[n][j] = a[n][j];//先把最后一行的d[][]赋值为a[][]本身
        for(int i = n-1; i >= 1; i--)
            for(int j = 1; j <= i; j++)
                d[i][j] = a[i][j] + max(d[i+1][j], d[i+1][j+1]);
        printf("%d\n", d[1][1]);//顶点就是所求解
    }
    return 0;
}


I - 核反应堆
1高 = 3高 + 1低
1低 = 2高 + 1低
那么每一秒，
高 = 3*[前一秒高] + 2*[前一秒低]
低 = 1*[前一秒高] + 1*[前一秒低]

代码：
#define LL long long
const int N = 40;
LL high, low;
LL dp[N][2];
int main()
{
	high = low = 0;
	dp[0][0] = 1; dp[0][1] = 0;
	for(int i = 1; i <= 33; i++) {
		dp[i][0] = dp[i-1][0]*3 + dp[i-1][1]*2;
		dp[i][1] = dp[i-1][0] + dp[i-1][1];
	}
	int n;
	while(scanf("%d", &n), n != -1) {
		printf("%I64d, %I64d\n", dp[n][0], dp[n][1]);
	}
	return 0;
}

J - 平方和与立方和
首先没人说输入数据第一个数一定比第二个数大。。。
然后对于每一个数，先判断是奇数还是偶数，然后分别求立方或平方加到ans中来。。。
代码：
int main()
{
	int n, m;
	while(~scanf("%d%d", &n, &m)) {
		if(n > m) {
			int t = n;
			n = m;
			m = t;
		}
		int ans_1 = 0, ans_2 = 0;
		for(int i = n; i <= m; i++) {
			if(i&1) ans_1 += i*i*i;
			else ans_2 += i*i;
		}
		printf("%d %d\n", ans_2, ans_1);
	}
	return 0;
}


K - 数值统计
输入的数字，有浮点型的，就按照浮点数输入，然后如果小于0，是负数；直接判断浮点数是否等于0要看它是不是比0.0000000...更小

代码：
const int N = 111;
const double eps = 1e-9;
int n;
double f[N];
int main()
{
	int neg, zero, pos;
	while(scanf("%d", &n), n) {
		neg = zero = pos = 0;
		for(int i = 0; i < n; i++) {
			scanf("%lf", &f[i]);
		}
		for(int i = 0; i < n; i++) {
			if(f[i] < 0) neg++;
			else if(f[i] > eps) pos++;
			else zero++;
		}
		printf("%d %d %d\n", neg, zero, pos);
	}
	return 0;
}


L - 成绩转换
大家提交不了这道题吧……
去这儿提交：http://acm.hdu.edu.cn/showproblem.php?pid=2004
先判断是否满分。。。然后判断非法输入。。。最后因为等级都是看十位数打的分（考成了个位数就当做0吧），可以除以10之后一个switch解决。。。

代码：
int main()
{
    int sco;
    while(~scanf("%d", &sco)) {
        char ans;
        if(sco == 100) {
            puts("A");
            continue;
        }
        if(sco > 100 || sco < 0) {
            puts("Score is error!");
            continue;
        }
        sco /= 10;
        switch(sco) {
            case 6: ans = 'D'; break;
            case 7: ans = 'C'; break;
            case 8: ans = 'B'; break;
            case 9: ans = 'A'; break;
            default:ans = 'E';
        }
        printf("%c\n", ans);
    }
    return 0;
}


M - 今年暑假不AC
这是区间问题，贪心法。。。
我们只关心看的节目个数，那么每一次选择节目，都力求能看更多的节目。。。
看完一个节目之后，才能选择另一个节目。。。
如果一个节目结束的时间很早很早，那么它对后来的节目选择影响越小。。。
把对后面节目选择造成影响的时间段（比如A节目5点结束，B、C、D节目5点之前开始，那么选择A就不能选择B、C、D），称为“有效区间”的话，有效区间越短越好。。。
因此节目结束时间越早的应该排在越前面。。。
之后，就只能依次选择不相交的区间了。。。
P.S. 还不懂的话，举个极端的例子：
A节目 7:00 ~ 20:00
B节目 19:30 ~ 21:30
如果你不选择A，选择B，那么
C节目 21:00 ~ 22:00     你还能选吗？

代码：
struct Ti {
    int s, e;
}tt[110];
int part(Ti *a, int l, int r)
{
	srand(time(0));
	int i = int(rand() % (r-l+1) + l);//取l~r随机数
	int key = a[i].e, tmp = a[i].s;
	a[i].e = a[l].e;
	a[i].s = a[l].s;
	//现在key是基数,a[l]留作安放键值
	while(l < r) {
		while(l < r && a[r].e >= key) r--;
		a[l].e = a[r].e;//自右向左找到第一个小于基数的，安放在a[l]
		a[l].s = a[r].s;		
		while(l < r && a[l].e <= key) l++;
		a[r].e = a[l].e;//自左向右找到第一个大于基数的，安放在a[r]
		a[r].s = a[l].s;	
	}
	a[l].s = tmp; a[l].e = key;//此时l==r，key左边的值都比它小，右边都比它大
	return l;
}

void Qsort(Ti *a, int l, int r)
{
	if(l < r) {
		int m = part(a, l, r);
		Qsort(a, l, m-1);
		Qsort(a, m+1, r);
	}
}

int main()
{
    int n, cou;
    int i, j;
    while(scanf("%d", &n), n) {
        cou = 1;
        for(i = 0; i < n; i++)
            scanf("%d%d", &tt[i].s, &tt[i].e);
		Qsort(tt, 0, n-1);
        for(i = 0, j = 1; j < n; j++) {
            if(tt[j].s >= tt[i].e) {
                cou++;//下一个节目在当前节目结束后开始
                i = j;//更新当前节目
            }//否则看下下一个节目
        }
        printf("%d\n", cou);
    }
	return 0;
}